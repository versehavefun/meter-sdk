// Code generated by go-bindata.
// sources:
// testnet/delegates.json
// mainnet/delegates.json
// DO NOT EDIT!

package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd3\x4b\x8f\xa2\x58\x14\x07\xf0\xbd\x9f\x82\xb8\xad\x8e\xde\xcb\x7d\x00\x26\xbd\x00\x04\x51\x7c\x20\xe2\x03\x27\x93\x0a\xc2\x45\x10\x04\x79\x08\xe2\xa4\xbf\xfb\xc4\x99\xea\xd5\x54\x67\xaa\xb7\x1c\xce\x4d\xce\xff\x97\xff\x1f\x3d\x8e\xfb\xab\xc7\x71\x1c\xd7\xcf\xbc\x2b\xeb\x8f\xb8\xfe\xc2\xab\x23\xd6\x72\xfb\x38\x4d\x63\xef\x5a\xf5\xbf\xfd\x3b\xf6\x82\xa0\x64\x55\xf5\xfa\x03\x3c\x04\x11\x13\xa8\x05\x40\x97\xa9\x8a\x42\x76\x22\x40\xd4\x24\xd9\xa7\x82\x16\xfa\x30\x14\x14\x76\x42\x8c\x86\x98\xfc\x5c\xbe\xdd\x4f\xef\x09\xeb\x5e\xcb\x8a\x6e\x85\x72\xba\x03\xd6\x71\x99\xdf\x63\x3b\x99\xc9\x87\x8b\xe8\x19\xd3\x67\x63\xe6\x64\x8d\xea\x85\x5f\xbd\xa9\xc3\x61\xb5\xdd\xd0\x54\x68\xe3\xa3\xbb\xb4\x23\x7e\x96\xd9\x2b\x7c\x7a\x6c\xc6\x72\x95\xcc\x51\x68\xd9\xba\xae\xe0\xbd\x25\xdc\x29\xeb\x30\x53\x93\xb9\xf8\x7d\x34\x1a\xad\x67\xcb\xe8\xd1\xcc\xca\x63\x5b\x4f\xd3\x3c\x7d\xa4\xec\xd9\xed\x11\x38\x89\x30\xa6\xcb\xdd\x6a\x68\xe4\xfc\xb5\xa4\x65\xd2\x6c\xbc\xda\x57\x36\xc5\xa6\x3a\x97\xdb\x76\xae\x97\xcc\xd0\x8f\xf7\xa8\x8c\x7c\x14\x19\xd7\x78\x42\x36\xdd\x61\x96\xd5\xe6\xb1\x30\xad\x71\xab\x7d\xff\x79\x45\x93\xd7\x71\x76\x7e\xbf\xe5\x2d\x2b\xfb\x23\x0e\x22\xf0\x31\xc8\x58\xdd\xe6\x65\xf2\xfe\xca\xa8\x3f\xfa\x08\x94\xe3\xfa\xf1\xed\x75\x31\x44\x03\x1e\xa2\x01\x1a\x20\xe9\xe3\xa5\x57\x22\x79\x59\xf7\x47\x9c\x48\x05\xf0\xcf\xa7\x1f\x3d\x8e\xfb\xf1\xed\xbf\x1a\x93\x94\x65\x9c\xee\x65\x59\xfe\x29\x84\xce\x4b\x54\xa2\x21\x0a\x25\x8a\x44\x59\xd5\x42\xc2\xfb\x14\x79\x88\x3f\x21\xaa\xfb\x0a\x14\x20\x42\x40\x26\xda\x67\x10\x72\x6e\xc5\xea\x7d\x96\x16\x78\xbb\x91\xe2\x52\xad\xa1\xb1\x8f\x12\x51\xe8\x4e\xcd\x73\x65\x75\x62\x55\x5a\xaa\xa3\xee\x95\x28\xdb\xda\x81\x9d\x65\x7a\x21\x38\x86\x35\xc5\xe1\x5b\xe0\x1e\x5a\x29\x8b\x1d\xc1\x71\x9d\xea\xc2\xce\xbb\x68\x1a\xeb\xe6\xd3\x14\xc8\x51\x7b\x41\xa4\xcb\x83\x9a\xc1\x85\x6a\x8d\x8b\x49\xe7\x87\xeb\x55\x9b\xf2\xf2\x4a\x7b\x36\xb6\x76\xd9\x3e\xd0\x30\x07\xfa\xe4\x79\x7d\x5c\xf2\xd6\x9d\x14\xed\x44\x6e\xc6\x2e\x53\x3a\xc1\x35\x66\x4b\x9e\xa9\xe6\x1b\x7a\x36\x1d\x2d\xda\xc3\xd3\x4a\xf1\x73\xe1\x3e\x6e\x9e\xc1\xe2\x56\xfe\x25\x04\xfe\x22\x84\x38\x80\x18\x0c\x08\x1a\x40\x01\xfc\x3e\xc5\x82\xa5\x79\xd0\x71\xfb\x3c\x0f\x3e\x6f\x05\x96\x30\xd6\x54\x20\x86\x00\x8a\x12\x55\x30\xd5\x09\xe5\x99\x08\x00\x18\x53\xfe\x84\x25\x0d\xc8\x02\x55\x44\xfd\x33\x0c\x2d\xc6\x73\x7e\xce\x1e\x3b\x54\x57\x74\x8f\x49\x21\x5c\x12\x29\x80\x6d\x24\xe6\xf3\x26\x1e\xc2\x29\x89\xb0\xc0\x1b\xce\x7d\x6c\x19\x43\x5b\x5d\x83\x62\x41\xcf\xf5\x29\xdc\xa9\xd2\xf1\x5e\x57\x37\xd0\x24\xcc\x71\x76\x4a\xb3\xaf\xe5\x20\xf0\x4b\xc3\xd9\x12\x7b\xfa\xc2\x50\xc5\x6c\x73\x70\xa2\xce\x45\x56\x1c\xd8\x6e\x81\xa6\x8d\xf9\xb8\x0b\x68\xa7\x56\xcc\x3e\xee\x16\xc1\x4e\xdf\xfa\x6b\xb5\xdb\x34\x6f\x66\x1b\xae\xb2\xea\xdc\x79\xc9\xd0\x24\xc7\x4e\x8a\xe4\xca\xdd\x9a\xc4\x38\xac\xc9\x96\xb0\x73\x5b\x95\xda\x9a\x29\x77\x4f\xc0\xeb\x5f\xb7\xe2\x8b\x18\x04\x0f\x20\x81\x03\x48\xe8\x00\x92\xff\x2b\x46\xef\xcf\xde\xdf\x01\x00\x00\xff\xff\x5e\x8d\x15\x44\xaa\x04\x00\x00")

func testnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_testnetDelegatesJson,
		"testnet/delegates.json",
	)
}

func testnetDelegatesJson() (*asset, error) {
	bytes, err := testnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testnet/delegates.json", size: 1194, mode: os.FileMode(436), modTime: time.Unix(1653362278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd1\xcb\x6e\x9b\x40\x14\x06\xe0\xbd\x9f\x62\xc4\x96\xd4\x99\x19\x06\x66\x8c\x94\x05\xc3\xcd\x4e\x7c\xbf\x84\xd8\x55\x15\x61\xc0\x06\x73\x0d\xe0\x00\xad\xf2\xee\x15\x6d\xb2\x4b\x54\x75\x7b\x8e\xce\x91\xfe\xff\xfb\x3e\x00\xe0\xd7\x00\x00\x00\x84\xcc\x4d\x03\x41\x05\x42\xea\x46\xd9\x37\x88\x84\x9b\xbf\x63\xd7\xf7\xcb\xa0\xaa\xfa\x0d\x6c\x35\x5d\x93\x19\x43\x50\xc1\x16\xc2\x0a\x97\x0c\x9d\x1a\x48\xd3\x31\xd3\x89\x31\x22\x1c\x2b\x23\x4a\x75\x88\xac\x8f\xe3\xe2\x7a\x7c\x8e\x83\xae\x3f\xe6\x4b\x6e\xed\xc7\x52\x27\xee\xa4\x75\xb9\x99\x3b\xc7\xe6\xa5\xcd\xbb\x00\x3f\x99\xb5\x8e\x0f\x0f\xdb\x90\x5d\xbd\xae\x59\xad\xd8\xf5\x71\xb9\x0b\x93\x94\xe6\x45\x18\xfa\x10\xb5\xfc\x1c\xdb\xfc\x3e\xd9\xc0\x89\x1f\x9f\x1f\x65\x9a\xef\x37\xcd\x32\xe8\xec\x75\x3c\x19\xcf\x66\x77\xaa\xaa\x26\xeb\xd4\xd4\x4b\xaf\x0b\xa2\xf6\xfe\xd2\xfa\xf1\x43\xc2\x0f\x8e\x39\xed\x2a\xed\x72\x94\x78\x8d\xe4\xec\xd6\xf6\xda\xeb\x34\xa5\x50\x11\xc3\x8b\x3c\x17\x67\xfe\xed\x32\xc4\xcd\xee\x50\x14\xb4\x36\x34\x77\x7b\x3a\x5b\xc7\x60\xe5\x55\xe6\xd8\xd9\xda\xa3\x45\x32\x87\x8d\x79\xf7\x91\xe2\x35\xaf\xa3\xec\xfc\x5c\xe4\x4d\x50\x0a\x2a\x40\x08\xbe\x2f\xb2\xa0\x6e\xf2\x32\x7e\xee\x3b\x12\xd4\xf7\x22\x01\x10\xa2\xa2\x4f\x8c\xa4\x21\x46\x64\x28\x2b\x43\xa4\xd0\xf7\x5f\x7d\x27\x79\x59\x0b\x2a\x60\x0a\x85\x7f\x46\x6f\x03\x00\xde\x6e\xbe\x72\xc0\x9f\x3a\x30\x4e\x34\xcd\x92\x20\xd7\x75\x13\x4a\x54\x26\x64\xc4\x09\xc2\xcc\x94\x4d\xc5\xb0\x14\x2a\x21\xc5\xd0\x4d\x64\x7e\xe6\xc0\x1d\x71\xe2\xcc\x4f\x8f\xa2\xdc\xae\xea\x24\x9a\x30\xb3\xf0\xa5\x66\xc6\x08\xf7\xae\xf8\x69\xfd\xb2\x48\xa6\xde\x58\x13\x9b\x2e\xb1\x9d\x43\xbe\x8b\x9e\xf6\x47\x3e\x59\xac\x9b\x5a\xe7\x2b\xc3\x99\xa6\x2b\x82\x3c\x67\xc7\x72\xbf\x79\xad\xf9\x89\x1e\xa7\xb1\x93\x93\xaa\x77\xd8\x8e\x6f\xed\x97\xba\xf4\x72\xf1\xa7\xe7\x47\x26\x1d\x7b\xd8\x3b\x24\x28\xde\x57\x28\x5f\x96\x27\xcd\x21\x2e\x69\xed\xf4\x94\xcd\x64\xfe\x30\xbb\x18\x0a\xaa\x8d\x6c\x5d\xb0\x9d\x13\x9d\x33\x42\xaa\x7d\x44\x1a\x77\x14\x3b\x9e\xee\x86\xaf\xd6\x62\x23\x42\x7b\x63\x9d\xb5\x2f\x1d\xf0\x7f\x39\x20\x8c\x86\x88\x29\xff\x80\x18\xfc\xf8\x1d\x00\x00\xff\xff\xfc\xa0\x7e\x84\x13\x03\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 787, mode: os.FileMode(436), modTime: time.Unix(1653362278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testnet/delegates.json": testnetDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"testnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{testnetDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

